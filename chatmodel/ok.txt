% MATLAB Code for Three-Bus System Power Flow Analysis
% Based on the problem with 3 buses and impedance of 0.02+j0.08 pu per line
% with shunt admittance of j0.02 pu

clc;
clear all;
close all;

n = 3; 
Ybus = zeros(n, n);

line_data = [
    1 2 0.02 0.08
    1 3 0.02 0.08
    2 3 0.02 0.08
];

for k = 1:size(line_data, 1)
    from_bus = line_data(k, 1);
    to_bus = line_data(k, 2);
    R = line_data(k, 3);
    X = line_data(k, 4);
    Y_series = 1/(R + 1i*X);
    Y_shunt = 1i*0.02; 
    
    Ybus(from_bus, from_bus) = Ybus(from_bus, from_bus) + Y_series;
    Ybus(to_bus, to_bus) = Ybus(to_bus, to_bus) + Y_series;
    Ybus(from_bus, to_bus) = Ybus(from_bus, to_bus) - Y_series;
    Ybus(to_bus, from_bus) = Ybus(to_bus, from_bus) - Y_series;
    
    Ybus(from_bus, from_bus) = Ybus(from_bus, from_bus) + Y_shunt/2;
    Ybus(to_bus, to_bus) = Ybus(to_bus, to_bus) + Y_shunt/2;
end

disp('Admittance Matrix:');
disp(Ybus);

v = ones(n, 1);
theta = zeros(n, 1);

v(1) = 1.04;
theta(1) = 0;

P = zeros(n, 1);
Q = zeros(n, 1);
P(2) = 0;     
Q(2) = 0;     

P(3) = -1.5;  
v(3) = 1.04;  

v_complex = v .* exp(1i * theta);

tolerance = 1e-6;
max_iter = 100;

bus_type = [1, 3, 2];  

disp('Bus data from the problem:');
disp('Bus  Type  V(pu)  Angle(deg)    P(pu)      Q(pu)');
for i = 1:n
    bus_type_str = {'Slack', 'PQ', 'PV'};
    fprintf('%3d   %4s  %5.3f    %8.3f    %8.3f   %8.3f\n', i, bus_type_str{bus_type(i)}, v(i), theta(i)*180/pi, P(i), Q(i));
end

disp('Starting Newton-Raphson Power Flow Analysis...');

iter = 0;
converged = false;

while iter < max_iter && ~converged
    iter = iter + 1;
    
    S_calc = zeros(n, 1);
    for i = 1:n
        for j = 1:n
            S_calc(i) = S_calc(i) + v_complex(i) * conj(Ybus(i,j) * v_complex(j));
        end
    end
    P_calculated = real(S_calc);
    Q_calculated = imag(S_calc);
    
    for i = 1:n
        if bus_type(i) == 2  
            Q(i) = Q_calculated(i);
        end
    end
    
    dP = P - P_calculated;
    dQ = Q - Q_calculated;
    
    mismatch = [];
    
    for i = 2:n  
        if bus_type(i) == 3  
            mismatch = [mismatch; dP(i); dQ(i)];
        elseif bus_type(i) == 2  
            mismatch = [mismatch; dP(i)];
        end
    end
    
    maxmismatch = max(abs(mismatch));
    if (maxmismatch <= tolerance)
        disp(['Convergence reached after ', num2str(iter), ' iterations.']);
        converged = true;
        break;
    end
    
    J = formJacobian(Ybus, v_complex, n, bus_type);
    
    correction = J \ mismatch;
    
    index = 1;
    for i = 2:n  
        if bus_type(i) == 3  
            theta(i) = theta(i) + correction(index);
            index = index + 1;
            v(i) = v(i) + correction(index);
            index = index + 1;
        elseif bus_type(i) == 2  
            theta(i) = theta(i) + correction(index);
            index = index + 1;
        end
    end
    
    v_complex = v .* exp(1i * theta);
    
    if mod(iter, 5) == 0
        disp(['Iteration: ', num2str(iter), ', Max mismatch: ', num2str(maxmismatch)]);
    end
end

if ~converged
    disp(['Warning: Solution did not converge after ', num2str(max_iter), ' iterations.']);
    disp(['Maximum mismatch: ', num2str(maxmismatch)]);
end

S_calc = zeros(n, 1);
for i = 1:n
    for j = 1:n
        S_calc(i) = S_calc(i) + v_complex(i) * conj(Ybus(i,j) * v_complex(j));
    end
end
P_calculated = real(S_calc);
Q_calculated = imag(S_calc);

disp('Line Flow Results:');
disp('From Bus  To Bus    P(MW)     Q(MVAr)');
for k = 1:size(line_data, 1)
    from_bus = line_data(k, 1);
    to_bus = line_data(k, 2);
    R = line_data(k, 3);
    X = line_data(k, 4);
    Y = 1/(R + 1i*X);
    Y_shunt = 1i*0.02/2; 
    
    Vi = v_complex(from_bus);
    Vj = v_complex(to_bus);
    Sij = Vi * conj(Y * (Vi - Vj) + Y_shunt * Vi);
    Sji = Vj * conj(Y * (Vj - Vi) + Y_shunt * Vj);
    
    fprintf('%4d     %4d     %8.4f  %8.4f\n', from_bus, to_bus, real(Sij)*100, imag(Sij)*100);
    fprintf('%4d     %4d     %8.4f  %8.4f\n', to_bus, from_bus, real(Sji)*100, imag(Sji)*100);
end

disp('Final Results:');
disp('Bus    Voltage(p.u.)    Angle(degrees)      P(MW)       Q(MVAr)');
for i = 1:n
    fprintf('%3d    %10.6f       %10.6f      %8.4f     %8.4f\n', i, abs(v_complex(i)), angle(v_complex(i))*180/pi, P_calculated(i)*100, Q_calculated(i)*100);
end

disp('-----------------------------------------------------------------');
disp('ANSWER TO THE PROBLEM:');
disp(['The reactive power generation at Bus 3 (Q_G3) = ', num2str(Q_calculated(3)*100), ' MVAr']);
disp('-----------------------------------------------------------------');

function J = formJacobian(Ybus, v_complex, n, bus_type)
    theta = angle(v_complex);
    V = abs(v_complex);
    
    num_pq = sum(bus_type == 3);
    num_pv = sum(bus_type == 2);
    
    num_vars = 2*num_pq + num_pv;
    J = zeros(num_vars, num_vars);
    
    theta_idx = {};
    v_idx = {};
    
    idx = 1;
    for i = 2:n
        if bus_type(i) == 3
            theta_idx{i} = idx;
            idx = idx + 1;
            v_idx{i} = idx;
            idx = idx + 1;
        elseif bus_type(i) == 2
            theta_idx{i} = idx;
            idx = idx + 1;
            v_idx{i} = -1;
        else
            theta_idx{i} = -1;
            v_idx{i} = -1;
        end
    end
    
    row_idx = 1;
    for i = 2:n
        if bus_type(i) == 3 || bus_type(i) == 2
            col_idx = 1;
            for j = 2:n
                if theta_idx{j} > 0
                    if i == j
                        sum_term = 0;
                        for k = 1:n
                            if k ~= i
                                G_ik = real(Ybus(i,k));
                                B_ik = imag(Ybus(i,k));
                                theta_ik = theta(i) - theta(k);
                                sum_term = sum_term + V(k) * (G_ik * sin(theta_ik) - B_ik * cos(theta_ik));
                            end
                        end
                        J(row_idx, theta_idx{j}) = V(i) * sum_term;
                    else
                        G_ij = real(Ybus(i,j));
                        B_ij = imag(Ybus(i,j));
                        theta_ij = theta(i) - theta(j);
                        J(row_idx, theta_idx{j}) = V(i) * V(j) * (G_ij * sin(theta_ij) - B_ij * cos(theta_ij));
                    end
                    col_idx = col_idx + 1;
                end
                
                if v_idx{j} > 0
                    if i == j
                        G_ii = real(Ybus(i,i));
                        sum_term = 0;
                        for k = 1:n
                            if k ~= i
                                G_ik = real(Ybus(i,k));
                                B_ik = imag(Ybus(i,k));
                                theta_ik = theta(i) - theta(k);
                                sum_term = sum_term + V(k) * (G_ik * cos(theta_ik) + B_ik * sin(theta_ik));
                            end
                        end
                        J(row_idx, v_idx{j}) = 2 * V(i) * G_ii + sum_term;
                    else
                        G_ij = real(Ybus(i,j));
                        B_ij = imag(Ybus(i,j));
                        theta_ij = theta(i) - theta(j);
                        J(row_idx, v_idx{j}) = V(i) * (G_ij * cos(theta_ij) + B_ij * sin(theta_ij));
                    end
                    col_idx = col_idx + 1;
                end
            end
            row_idx = row_idx + 1;
        end
        
        if bus_type(i) == 3
            col_idx = 1;
            for j = 2:n
                if theta_idx{j} > 0
                    if i == j
                        sum_term = 0;
                        for k = 1:n
                            if k ~= i
                                G_ik = real(Ybus(i,k));
                                B_ik = imag(Ybus(i,k));
                                theta_ik = theta(i) - theta(k);
                                sum_term = sum_term + V(k) * (G_ik * cos(theta_ik) + B_ik * sin(theta_ik));
                            end
                        end
                        J(row_idx, theta_idx{j}) = -V(i) * sum_term;
                    else
                        G_ij = real(Ybus(i,j));
                        B_ij = imag(Ybus(i,j));
                        theta_ij = theta(i) - theta(j);
                        J(row_idx, theta_idx{j}) = -V(i) * V(j) * (G_ij * cos(theta_ij) + B_ij * sin(theta_ij));
                    end
                    col_idx = col_idx + 1;
                end
                
                if v_idx{j} > 0
                    if i == j
                        B_ii = imag(Ybus(i,i));
                        sum_term = 0;
                        for k = 1:n
                            if k ~= i
                                G_ik = real(Ybus(i,k));
                                B_ik = imag(Ybus(i,k));
                                theta_ik = theta(i) - theta(k);
                                sum_term = sum_term + V(k) * (G_ik * sin(theta_ik) - B_ik * cos(theta_ik));
                            end
                        end
                        J(row_idx, v_idx{j}) = -2 * V(i) * B_ii + sum_term;
                    else
                        G_ij = real(Ybus(i,j));
                        B_ij = imag(Ybus(i,j));
                        theta_ij = theta(i) - theta(j);
                        J(row_idx, v_idx{j}) = V(i) * (G_ij * sin(theta_ij) - B_ij * cos(theta_ij));
                    end
                    col_idx = col_idx + 1;
                end
            end
            row_idx = row_idx + 1;
        end
    end
end